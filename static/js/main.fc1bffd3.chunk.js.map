{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","onClick","color","value","Board","i","_this","this","squares","key","items","j","winLine","includes","push","renderSquare","React","Component","Game","_this2","Object","_Users_tai_lai_src_github_com_ctlai95_react_tutorial_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_Users_tai_lai_src_github_com_ctlai95_react_tutorial_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_tai_lai_src_github_com_ctlai95_react_tutorial_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","history","Array","fill","lastLocation","stepNumber","xIsNext","ascending","index","slice","length","calculateWinner","setState","concat","col","row","Math","floor","step","status","_this3","current","winner","moves","map","move","desc","jumpTo","style","fontWeight","movesList","reverse","reversed","boardFull","team","line","handleClick","toggleListView","lines","_lines$i","_Users_tai_lai_src_github_com_ctlai95_react_tutorial_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fc1bffd3.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            <font color={props.color}>{props.value}</font>\n        </button >\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i, color) {\n        return (\n            <Square\n                value={this.props.squares[i]}\n                color={color}\n                onClick={() => this.props.onClick(i)}\n                key={i}\n            />\n        );\n    }\n\n    render() {\n        const items = [];\n        for (let i = 0; i < 3; i++) {\n            const squares = [];\n            for (let j = i * 3; j < i * 3 + 3; j++) {\n                let color = this.props.winLine.includes(j) ? 'red' : 'black';\n                squares.push(this.renderSquare(j, color));\n            }\n            items.push(<div className=\"board-row\" key={i} >{squares}</div>);\n        }\n\n        return (\n            <div>{items}</div >\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n                lastLocation: null,\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n            ascending: false,\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                lastLocation: getLocationFromIndex(i),\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        });\n    }\n\n    toggleListView() {\n        this.setState({\n            ascending: !this.state.ascending,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        let moves = history.map((step, move) => {\n            const desc = move ?\n                `Go to move #${move} (${history[move].lastLocation.col}, ${history[move].lastLocation.row})` :\n                'Go to game start';\n            return (\n                <li key={move} >\n                    <button onClick={() => this.jumpTo(move)}>\n                        <span style={move === this.state.stepNumber ? { fontWeight: 'bold' } : { fontWeight: 'normal' }}>\n                            {desc}\n                        </span>\n                    </button>\n                </li >\n            );\n        });\n\n        let movesList = <ol>{moves}</ol>;\n        if (this.state.ascending) {\n            moves = moves.reverse();\n            movesList = <ol reversed>{moves}</ol>\n        }\n\n        let status;\n        let winLine = [];\n        let boardFull = !current.squares.includes(null);\n        if (winner) {\n            status = 'Winner: ' + winner.team;\n            winLine = winner.line;\n        } else if (boardFull) {\n            status = 'Tie game';\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}\n                        winLine={winLine}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <button onClick={() => this.toggleListView()}>Toggle List View</button>\n                    {movesList}\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return {\n                team: squares[a],\n                line: lines[i],\n            };\n        }\n    }\n    return null;\n}\n\nfunction getLocationFromIndex(index) {\n    return {\n        col: index % 3,\n        row: Math.floor(index / 3),\n    }\n}\n"],"sourceRoot":""}